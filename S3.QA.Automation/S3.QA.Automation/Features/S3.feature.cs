// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace S3.QA.Automation.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("S3 Web Application", Description="\tTesting S3 web Application", SourceFile="Features\\S3.feature", SourceLine=5)]
    public partial class S3WebApplicationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "S3.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "S3 Web Application", "\tTesting S3 web Application", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ValidatingUI(string scenario, string uRL, string browser, string title, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UITest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validating UI", @__tags);
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given(string.Format("the S3 {0} is launched in {1} browser", uRL, browser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.And("The page is completely loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.When("I validate the title of home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then(string.Format("the title should contain {0}", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
 testRunner.Then("Exit the Application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validating UI, of S3 home page", new string[] {
                "UITest",
                "source:../TestData/TestData.xlsx:UI"}, SourceLine=5)]
        public virtual void ValidatingUI_OfS3HomePage()
        {
            this.ValidatingUI("of S3 home page", "http://www.s3connectedhealth.com/", "chrome", "S3", new string[] {
                        "source:../TestData/TestData.xlsx:UI"});
#line hidden
        }
        
        public virtual void ValidatingAPI(string scenario, string apiURL, string statusCode, string version, string responseCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validating API", @__tags);
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given(string.Format("the {0} service is up and running", apiURL), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When(string.Format("the client gets all projects for a given {0}", apiURL), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then(string.Format("a {0} StatusCode should be returned", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.Then(string.Format("a {0} Version should be returned", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validating API, of S3 home page", new string[] {
                "APITest",
                "source:../TestData/TestData.xlsx:API"}, SourceLine=5)]
        public virtual void ValidatingAPI_OfS3HomePage()
        {
            this.ValidatingAPI("of S3 home page", "http://www.s3connectedhealth.com/", "OK", "1.1", "NOT OK", new string[] {
                        "source:../TestData/TestData.xlsx:API"});
#line hidden
        }
        
        public virtual void ValidatingAPIFailureScenario(string scenario, string apiURL, string statusCode, string version, string reasonPhrase, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITestFailure"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validating API failure scenario", @__tags);
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given(string.Format("the {0} service is up and running", apiURL), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When(string.Format("the client gets all projects for a given {0}", apiURL), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then(string.Format("a {0} ReasonPhrase should be returned", reasonPhrase), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validating API failure scenario, of S3 home page", new string[] {
                "APITestFailure",
                "source:../TestData/TestData.xlsx:API"}, SourceLine=5)]
        public virtual void ValidatingAPIFailureScenario_OfS3HomePage()
        {
            this.ValidatingAPIFailureScenario("of S3 home page", "http://www.s3connectedhealth.com/", "OK", "1.1", "NOT OK", new string[] {
                        "source:../TestData/TestData.xlsx:API"});
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
